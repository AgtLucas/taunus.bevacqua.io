section.ly-section.md-markdown
  :markdown
    # Performance Optimization

    Given that performance is one of the core values in both Taunus and User Experience, it deserved a first-class article on the site as well.

    There's a few things to take into account when developing an application if we want to strive for performance, and this article aims to be a collection of web performance best practices along with tips on how to improve performance especifically for applications built on top of Taunus.

    # Performance Checklist

    If you haven't, you should read ["Critical Path Performance Optimization"][1] as a small guide of performance optimizations you should already be doing. The list below contains some of what's discussed in that article.

    - Move away from dedicated client-side rendering
    - Use [`nginx`][2] as a reverse proxy for your front-end servers
    - Resize and optimize images
    - Defer non-critical static asset loading
    - Inline critical CSS and JavaScript
    - Cache responses aggressively
    - Ditch large libraries and frameworks

    # Boosting Performance with Taunus

    When it comes to Taunus, there's a few more performance tweaks you should consider implementing.

    - Choose the right boot strategy
    - Turn on client-side caching
    - Enable prefetching for predictive cache loading
    - Use versioning to ensure cache relevance
    - Send views and controllers to the client selectively

    Given that this site is about Taunus, we'll focus on the Taunus tweaks, as you can readily scour the web for general web performance advice.

    # Choose the right boot strategy
    # Turn on client-side caching
    # Enable prefetching for predictive cache loading
    # Use versioning to ensure cache relevance
    # Send views and controllers to the client selectively

    [1]: http://ponyfoo.com/articles/critical-path-performance-optimization
    [2]: http://nginx.org/
