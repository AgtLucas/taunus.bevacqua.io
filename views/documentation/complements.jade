section.ly-section.md-markdown
  :markdown
    # Complementary Modules

    Taunus is a small library by MVC framework standards, sitting **below 15kB minified and gzipped**. It is designed to be small. It is also designed to do one thing well, and that's _being a shared-rendering MVC engine_.

    Taunus can be used for routing, putting together controllers, models and views to handle human interaction. If you [head over to the API documentation][1], you'll notice that the server-side API, the command-line interface, and the `.taunusrc` manifest are only concerned with providing a conventional shared-rendering MVC engine.

    In the server-side you might need to do other things besides routing and rendering views, and other modules can take care of that. However, you're used to having database access, search, logging, and a variety of services handled by separate libraries, instead of a single behemoth that tries to do everything.

    > In the client-side, you might be used to your MVC framework of choice resolving everything on your behalf, from DOM manipulation and data-binding to hooking up with a REST API, and everywhere in between.

    Taunus attempts to bring the server-side mentality of _"not doing everything is okay"_ into the world of client-side web application development as well. To that end, Taunus recommends that you give a shot to libraries that also do **one thing well**.

    In this brief article we'll recommend three different libraries that play well with Taunus, and you'll also learn how to search for modules that can give you access to other functionality you may be interested in.

    # Using `dominus` for DOM querying

    [Dominus][2] is an extra-small DOM querying library, currently clocking below **4kB minified and gzipped**, almost _ten times smaller_ than it's competition. Unlike jQuery and popular friends, Dominus doesn't provide AJAX features, layout math, `<form>` manipulation, promises, tens of event binding methods, a selector engine written in plain JavaScript, nor a myriad of utility functions. Instead, Dominus focuses solely on providing a rich DOM querying and manipulation API that gets rid of inconsistencies across browsers.

    While the API isn't exactly compatible with jQuery, it is definitely familiar to the jQuery adept. Chaining, versatility, expressiveness, and raw power are all core concerns for Dominus. You'll find that Dominus has more consistently named methods, given that it was built with a concise API in mind.

    There's a few differences in semantics, and I believe that's a good thing. For instance, if you do `.value` on a checkbox or radio button you'll get back whether the input is checked. Similarly, if you call .text on it you'll get the text that's visible on the `input`.

    ```js
    var $ = require('dominus');

    $('<input>').attr({ type: 'check', value: 'Foo' }).text();
    // <- 'Foo'

    $('<input>').attr({ type: 'check', value: 'Foo', checked: true }).value();
    // <- true

    jQuery('<input>').attr({ type: 'check', value: 'Foo' }).text();
    // <- ''

    jQuery('<input>').attr({ type: 'check', value: 'Foo', checked: true }).value();
    // <- ''
    ```

    # Using `xhr` to make AJAX requests

    # Using `measly` as an upgrade to `xhr`

    # Complementing your code with small modules

    [1]: /api
    [2]: https://github.com/bevacqua/dominus
    [3]: https://github.com/bevacqua/measly
    [4]: https://github.com/Raynos/xhr
